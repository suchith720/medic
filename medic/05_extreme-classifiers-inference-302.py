# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_extreme-classifiers.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/05_extreme-classifiers.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np

from xcai.basics import *
from xcai.data import MainXCDataset
from xcai.models.classifiers import CLS001

from transformers import DistilBertConfig

from fastcore.utils import *

# %% ../nbs/05_extreme-classifiers.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '7'
os.environ['WANDB_MODE'] = 'disabled'

# %% ../nbs/05_extreme-classifiers.ipynb 18
if __name__ == '__main__':
    build_block = False
    dataset_type = 'wikipedia'
    data_dir = '/data/datasets/'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    
    output_dir = '/home/aiscuser/scratch1/outputs/medic/05_extreme-classifiers-302'

    """ Load data """
    if dataset_type == 'wikiseealsotitles': pkl_file = f'{pkl_dir}/processed/wikiseealsotitles_data_distilbert-base-uncased_xcs.pkl'
    elif dataset_type == 'wikititles': pkl_file = f'{pkl_dir}/processed/wikititles_data_distilbert-base-uncased_xcs.pkl'
    elif dataset_type == 'wikiseealso': pkl_file = f'{pkl_dir}/processed/wikiseealso_data_distilbert-base-uncased_xcs.pkl'
    elif dataset_type == 'wikipedia': pkl_file = f'{pkl_dir}/processed/wikipedia_data_distilbert-base-uncased_xcs.pkl'
    else: raise ValueError(f'Invalid `dataset_type`: {dataset_type}')

    if build_block:
        block = XCBlock.from_cfg(data_dir, 'data', dset=dataset_type, transform_type='xcs', tokenizer='distilbert-base-uncased', 
                                 sampling_features=[('lbl2data',1)], oversample=False)
        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)

    block.collator.tfms.tfms[0].sampling_features = [('lbl2data',1)]
    block.collator.tfms.tfms[0].oversample = False

    del block.train.dset.data.data_info['input_ids']
    del block.train.dset.data.data_info['attention_mask']
    del block.train.dset.data.lbl_info['input_ids']
    del block.train.dset.data.lbl_info['attention_mask']

    del block.test.dset.data.data_info['input_ids']
    del block.test.dset.data.data_info['attention_mask']
    del block.test.dset.data.lbl_info['input_ids']
    del block.test.dset.data.lbl_info['attention_mask']

    """ Training arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=4098,
        per_device_eval_batch_size=1600,
        representation_num_beams=200,
        representation_accumulation_steps=100,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=400,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=1e-3,
        
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
        
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        label_names=['lbl2data_idx', 'lbl2data_input_ids', 'lbl2data_attention_mask'],
    )

    """ Classifiers """
    mname = f'{output_dir}/{os.path.basename(get_best_model(output_dir))}'

    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()
    model = CLS001.from_pretrained(mname, n_train=block.train.dset.n_data, 
            n_test=block.test.dset.n_data, n_lbl=block.n_lbl, batch_size=bsz, num_batch_labels=5000, margin=0.3, 
            num_negatives=10, tau=0.1, apply_softmax=True)

    """ Training """
    metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], pa=0.5, pb=0.4)

    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )

    os.makedirs(f'{output_dir}/predictions', exist_ok=True)
    test_pred_file = f'{output_dir}/predictions/test_predictions.pkl'

    o = learn.predict(block.test.dset)
    with open(test_pred_file, 'wb') as file: pickle.dump(o, file)
    print(o.metrics)

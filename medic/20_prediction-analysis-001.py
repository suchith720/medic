# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_prediction-analysis.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/20_prediction-analysis.ipynb 2
import pickle, numpy as np
from xcai.basics import *
from xcai.analysis import *

from xclib.utils.sparse import retain_topk

from IPython.display import HTML,display

# %% ../nbs/20_prediction-analysis.ipynb 4
if __name__ == '__main__':
    topk,num_preds,metric,num_data = 5, 5,'P',10
    dataset_name = 'wikiseealsotitles'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    odir_a = '/data/Projects/xc_nlg/outputs/86-distillation-for-wikiseealso-with-oak-7-3-4/'
    odir_b = '/data/Projects/xc_nlg/outputs/85-oak-dr-ep-for-wikiseealso-with-additive-renee-embedding-5-3'

    """ Load data """
    pkl_file = f'{pkl_dir}/processed/{dataset_name}_data-cat-lnk_distilbert-base-uncased_xcs.pkl'
    with open(pkl_file, 'rb') as file: block = pickle.load(file)

    data_meta = retain_topk(block.train.dset.meta.lnk_meta.data_meta, k=5)
    lbl_meta = block.train.dset.meta.lnk_meta.lbl_meta
    block.train.dset.meta.lnk_meta.update_meta_matrix(data_meta, lbl_meta)

    data_meta = retain_topk(block.test.dset.meta.lnk_meta.data_meta, k=3)
    lbl_meta = block.test.dset.meta.lnk_meta.lbl_meta
    block.test.dset.meta.lnk_meta.update_meta_matrix(data_meta, lbl_meta)

    """ Load predictions """
    pred_file = f'{odir_a}/predictions/test_predictions.pkl'
    plbl_a = get_pred_sparse(pred_file, block.n_lbl)
    
    pred_file = f'{odir_b}/predictions/test_predictions.pkl'
    plbl_b = get_pred_sparse(pred_file, block.n_lbl)

    """ Analysis """
    pattern = r'^(data|lbl2data|lnk2data|cat2data)_input_text$'

    pdset_a = TextColumns(get_pred_dset(retain_topk(plbl_a, k=num_preds), block), pat=pattern)
    pdset_b = TextColumns(get_pred_dset(retain_topk(plbl_b, k=num_preds), block), pat=pattern)
    test_dset = TextColumns(block.test.dset, pat=pattern)

    eval_a = pointwise_eval(plbl_a, block.test.dset.data.data_lbl, block.test.dset.data.data_lbl_filterer, topk=topk, metric=metric)
    eval_b = pointwise_eval(plbl_b, block.test.dset.data.data_lbl, block.test.dset.data.data_lbl_filterer, topk=topk, metric=metric)

    eval_a = np.array(eval_a.sum(axis=1)).squeeze()
    eval_b = np.array(eval_b.sum(axis=1)).squeeze()

    idxs = np.argsort(eval_b - eval_a)[:num_data]

    o = compare_text(pdset_a, pdset_b, test_dset, idxs)
    # with open('out.txt', 'w') as file: file.write(o)
    print(o)
    
